
@misc{noauthor_quic_2024,
	title = {{QUIC}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=QUIC&oldid=1210065077},
	abstract = {QUIC () is a general-purpose transport layer network protocol initially designed by Jim Roskind at Google, implemented, and deployed in 2012, announced publicly in 2013 as experimentation broadened, and described at an IETF meeting. QUIC is used by more than half of all connections from the Chrome web browser to Google's servers. Microsoft Edge (which, after version series 1.x, is a derivative of the open-source Chromium browser), Firefox and Safari support it.Although its name was initially proposed as the acronym for "Quick UDP Internet Connections", IETF's use of the word QUIC is not an acronym; it is simply the name of the protocol. QUIC improves performance of connection-oriented web applications that are currently using TCP. It does this by establishing a number of multiplexed connections between two endpoints using User Datagram Protocol (UDP), and is designed to obsolete TCP at the transport layer for many applications, thus earning the protocol the occasional nickname "TCP/2".QUIC works hand-in-hand with HTTP/2's multiplexed connections, allowing multiple streams of data to reach all the endpoints independently, and hence independent of packet losses involving other streams. In contrast, HTTP/2 hosted on Transmission Control Protocol (TCP) can suffer head-of-line-blocking delays of all multiplexed streams if any of the TCP packets are delayed or lost.
QUIC's secondary goals include reduced connection and transport latency, and bandwidth estimation in each direction to avoid congestion. It also moves congestion control algorithms into the user space at both endpoints, rather than the kernel space, which it is claimed will allow these algorithms to improve more rapidly. Additionally, the protocol can be extended with forward error correction (FEC) to further improve performance when errors are expected, and this is seen as the next step in the protocol's evolution. It has been designed to avoid protocol ossification so that it remains evolvable, unlike TCP, which has suffered significant ossification.
In June 2015, an Internet Draft of a specification for QUIC was submitted to the IETF for standardization. A QUIC working group was established in 2016. In October 2018, the IETF's HTTP and QUIC Working Groups jointly decided to call the HTTP mapping over QUIC "HTTP/3" in advance of making it a worldwide standard. In May 2021, the IETF standardized QUIC in RFC 9000, supported by RFC 8999, RFC 9001 and RFC 9002. DNS-over-QUIC is another application.},
	language = {en},
	urldate = {2024-03-11},
	journal = {Wikipedia},
	month = feb,
	year = {2024},
	note = {Page Version ID: 1210065077},
	file = {Snapshot:/home/thomas/Zotero/storage/S7CG5EDN/QUIC.html:text/html},
}

@misc{noauthor_ive_nodate,
	title = {I've lots of request from *.bc.googleusercontent.com - {Google} {Search} {Central} {Community}},
	url = {https://support.google.com/webmasters/thread/234393264/i-ve-lots-of-request-from-bc-googleusercontent-com?hl=en},
	urldate = {2024-03-11},
	file = {I've lots of request from *.bc.googleusercontent.com - Google Search Central Community:/home/thomas/Zotero/storage/LQFRRERL/i-ve-lots-of-request-from-bc-googleusercontent-com.html:text/html},
}

@misc{noauthor_http2_nodate,
	title = {{HTTP}/2 and {HTTP}/3 {\textbar} {Operation} and benefits},
	url = {https://www.combell.com/en/technology/http},
	abstract = {HTTP/2 and HTTP/3 reduce the risk of server overload and prevent slow loading. Discover all the benefits of both HTTP protocols.},
	language = {en},
	urldate = {2024-03-11},
	file = {Snapshot:/home/thomas/Zotero/storage/RGFJ33SP/http.html:text/html},
}

@misc{noauthor_what_nodate,
	title = {What is {ICMP}? {\textbar} {Internet} {Control} {Message} {Protocol}},
	shorttitle = {What is {ICMP}?},
	url = {https://www.cloudflare.com/learning/ddos/glossary/internet-control-message-protocol-icmp/},
	abstract = {The Internet Control Message Protocol (ICMP) is a network layer protocol used by network devices to communicate. Learn more about the ICMP.},
	language = {en-us},
	urldate = {2024-03-11},
	journal = {Cloudflare},
	file = {Snapshot:/home/thomas/Zotero/storage/HV65EURP/internet-control-message-protocol-icmp.html:text/html},
}

@misc{noauthor_multicast_2023,
	title = {Multicast {DNS}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Multicast_DNS&oldid=1185150663},
	abstract = {In computer networking, the multicast DNS (mDNS) protocol resolves hostnames to IP addresses within small networks that do not include a local name server. It is a zero-configuration service, using essentially the same programming interfaces, packet formats and operating semantics as unicast Domain Name System (DNS). It was designed to work as either a stand-alone protocol or compatibly with standard DNS servers. It uses IP multicast User Datagram Protocol (UDP) packets and is implemented by the Apple Bonjour and open-source Avahi software packages, included in most Linux distributions. Although the Windows 10 implementation was limited to discovering networked printers, subsequent releases resolved hostnames as well. mDNS can work in conjunction with DNS Service Discovery (DNS-SD), a companion zero-configuration networking technique specified separately in RFC 6763.},
	language = {en},
	urldate = {2024-03-11},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1185150663},
	file = {Snapshot:/home/thomas/Zotero/storage/WIGAJ4WD/Multicast_DNS.html:text/html},
}

@misc{noauthor_what_nodate-1,
	title = {What is {Transport} {Layer} {Security} ({TLS})? {\textbar} {Cloudflare}},
	url = {https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/},
	urldate = {2024-03-11},
	file = {What is Transport Layer Security (TLS)? | Cloudflare:/home/thomas/Zotero/storage/KG9PAX83/transport-layer-security-tls.html:text/html},
}

@misc{noauthor_websocket_nodate,
	title = {{WebSocket} {API} and protocol explained: {How} they work, are used and more},
	shorttitle = {{WebSocket} {API} and protocol explained},
	url = {https://ably.com/topic/websockets},
	abstract = {We cover the WebSocket protocol and API, how WebSockets work, WebSocket use cases, pros and cons, WebSocket alternatives, WebSocket scalability, and more.},
	urldate = {2024-03-11},
	journal = {Ably Realtime},
	file = {Snapshot:/home/thomas/Zotero/storage/X7K8F7H7/websockets.html:text/html},
}
